// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: reconditematter/v1/reconditematter.proto

package reconditematterv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReconditeMatterServiceClient is the client API for ReconditeMatterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReconditeMatterServiceClient interface {
	RandomNames(ctx context.Context, in *RandomNamesRequest, opts ...grpc.CallOption) (*RandomNamesResponse, error)
}

type reconditeMatterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReconditeMatterServiceClient(cc grpc.ClientConnInterface) ReconditeMatterServiceClient {
	return &reconditeMatterServiceClient{cc}
}

func (c *reconditeMatterServiceClient) RandomNames(ctx context.Context, in *RandomNamesRequest, opts ...grpc.CallOption) (*RandomNamesResponse, error) {
	out := new(RandomNamesResponse)
	err := c.cc.Invoke(ctx, "/reconditematter.v1.ReconditeMatterService/RandomNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReconditeMatterServiceServer is the server API for ReconditeMatterService service.
// All implementations should embed UnimplementedReconditeMatterServiceServer
// for forward compatibility
type ReconditeMatterServiceServer interface {
	RandomNames(context.Context, *RandomNamesRequest) (*RandomNamesResponse, error)
}

// UnimplementedReconditeMatterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReconditeMatterServiceServer struct {
}

func (UnimplementedReconditeMatterServiceServer) RandomNames(context.Context, *RandomNamesRequest) (*RandomNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomNames not implemented")
}

// UnsafeReconditeMatterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReconditeMatterServiceServer will
// result in compilation errors.
type UnsafeReconditeMatterServiceServer interface {
	mustEmbedUnimplementedReconditeMatterServiceServer()
}

func RegisterReconditeMatterServiceServer(s grpc.ServiceRegistrar, srv ReconditeMatterServiceServer) {
	s.RegisterService(&ReconditeMatterService_ServiceDesc, srv)
}

func _ReconditeMatterService_RandomNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconditeMatterServiceServer).RandomNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reconditematter.v1.ReconditeMatterService/RandomNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconditeMatterServiceServer).RandomNames(ctx, req.(*RandomNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReconditeMatterService_ServiceDesc is the grpc.ServiceDesc for ReconditeMatterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReconditeMatterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reconditematter.v1.ReconditeMatterService",
	HandlerType: (*ReconditeMatterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RandomNames",
			Handler:    _ReconditeMatterService_RandomNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reconditematter/v1/reconditematter.proto",
}
